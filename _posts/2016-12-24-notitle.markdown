---
layout: post
title: notitle
date: 2016-12-24 23:53:00
tags:
- Life
- Tech
---

숙제

# SaaS화 하기 쉬운SW
- SaaS로 옮기기 쉬운 SW의 종류(ERP,CRM,백오피스...)?
- SaaS를 위한 SW의 쉬운 패키징 방법
- SaaS화 하기 위해 최적화된 아키텍처 구성은?

## 왜 SaaS를 쓰는가?(장단점)

### 장점
- 사용 편의성, 보안문제가 없을 경우 도입이 더 쉽다. 편리한 업그레이드 - 시간 단축
- 단기일 경우 유지보수/운영비용의 절감
- 사용자의 어플리케이션 사용방식과 패턴을 이해 가능

### 단점
- 고객별 Customizing 이 어려움
- 제품개발의 비용이 기존 제품보다 더 크다(Multi-tenant이므로)
- 법/규제문제
- 성능 이슈 발생 가능
- 어플리케이션 간 통합 및 연계의 어려움

## SaaS화 하기 쉬운 SW
- 고객의 중요한 Data가 없는 SW : 예) 은행의 경우(Account,원장)
- (비즈니스 자체가 아닌)도구성 서비스
- 접근, 사용 편의성이 더 중요시되는 경우
- 고객에게 아예 새로운 비즈니스를 제공하거나, 아예 비즈니스를 제공하지 않음

기타. SW들이 SaaS화 되어가고 있는 원인
- 기술의 발전 - 네트워크, 컴퓨팅 자원의 발전 - Rich Client가 브라우저에서 가능해 짐
- 버전 관리, 설치, 업그레이드 편의성 - 유지보수/운영비용 절감
- 클라우드 기반 환경 - 유연성, Scalable 아키텍처

## SaaS를 위한 설치,관리도구
설정관리 도구(Configuration management Tool), 클라우드 관리 도구, 배포도구 등 서비스의 설치, 배포, 운영 등에 관여하는 소프트웨어 형태, 각각 설치Script를 작성, 배포, 공유 가능한 생태계(eco-system)을 가지고 있어, 사용자들이 쉽게 활용할 수 있도록 하고 있음. 컨설팅이나, 일정 수준 이상의 사용일 경우 비용을 받는 형태의 비즈니스 모델을 가지고 있음.

### Chef
가장 많이 쓰여지는 도구, AWS에 opswork로 addon되어 있음, 기능이 많이 들어가서 예전 버전에 비해 많이 무거워짐, Chef-solo로 단일 서버에서도 쓸 수 있음, Server-Client구성시 무겁고 방법이 어렵다. 기반 언어는 Ruby임, 25node 이상일 경우 유료

### puppet
Chef에 이어 많이 쓰이는 도구, 많은 부분에서 Chef와 유사, 기반언어는 Ruby

### Ansible
Agent-less구조가 가능한 비교적 신규 도구, Chef,puppet에 비해 해당 부분이 강점일수 있으나, 약점이 될 수도 있을 듯. 기반 언어는 Python. 최근에 Redhat에 인수됨. GUI가 있는 Ansible Tower의 경우만 유료.

### Saltstack
자세히 모릅니다...ㅡ.,ㅡ;

이외로 Docker, CFEngine, Fabric, Capistrano 등(개인적으로는 Docker가 가장 발전된 형태라고 생각)

## 참고
[SaaS동향](http://www.slideshare.net/SeongBokLee/saas-59305888)
[ISV관점의 SaaS분석](http://www.slideshare.net/DanielHyeon/isv-saa-s-27491146)
[Comparison of open-source configuration management software](https://en.wikipedia.org/wiki/Comparison_of_open-source_configuration_management_software)
