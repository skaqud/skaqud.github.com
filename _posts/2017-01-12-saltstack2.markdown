---
layout: post
title: saltstack(2)
date: 2016-12-29 23:53:00
tags:
- architecture
- Tech
- Devops
---

Saltstack 활용방법(작성중)

* TOC
{:toc}
---

# 환경 준비

Vagrant를 통해 VM을 3대 띄울 예정, 1대는 master로 나머지 2대는 minion으로 구성.

base image는 Vagrant에서 바로 다운로드(ubuntu/trusty)

    VM1 - salt-master, 2cpu, 1GB ram
    VM2 - salt-minion1, 1cpu, 512MB ram
    VM3 - salt-minion2, 1cpu, 512MB ram
    각각의 OS는 ubuntu 14.04 LTS

설치는 [이 글:"SaltStack – IT automation infrastructure management tools"](http://www.yongbok.net/blog/saltstack-it-automation-infrastructure-management-tools/)을 참고하였으며, 다음과 같은 작업들을 수행할 예정

    salt-master, minion 설치 및 연결
    GUI도구 설치 및 검토(Halite, Saltpad)
    간단한 WEB-WAS-DB구성 자동설치,이중화 테스트


## Vagrant로 VM시작

IP, CPU, Memory 부분만 다르게 하여 세대의 VM을 구성함.

    #vi Vagrantfile
    Vagrant.require_version ">= 1.6.0"
    VAGRANTFILE_API_VERSION = "2"
    VMHOSTNAME="test1"
    VMIP="192.168.10.10"

    Vagrant.configure (VAGRANTFILE_API_VERSION) do | config |
        config.vm.box = "ubuntu/trusty64"
            config.vm.hostname = VMHOSTNAME
            # network setting
        config.vm.network :private_network, ip: VMIP

        config.vm.provider :virtualbox do | vb |
            vb.name = VMHOSTNAME
            vb.gui = false
            vb.cpus = 2
            vb.memory = 1024
         end
    end


## Saltstack 설치


host 정보를 등록

    $ vi /etc/hosts
    192.168.10.10 salt-master
    192.168.100.100 minion1
    192.168.100.200 minion2

SaltStack 저장소 등록 및 설치


    apt-get install -y python-software-properties software-properties-common
    echo deb http://ppa.launchpad.net/saltstack/salt/ubuntu `lsb_release -sc` main > /etc/apt/sources.list.d/saltstack.list
    wget -q -O- "http://keyserver.ubuntu.com:11371/pks/lookup?op=get&search=0x4759FA960E27C0A6" | apt-key add -

Saltstack 설치

    master
    apt-get update && apt-get install -y salt-master salt-syndic
    minion
    apt-get update && apt-get install -y salt-minion


Saltstack 실행

master

service salt-master start

혹은 FG 모드로
salt-master -l info


minion
salt-minion -l info

이후 서버에서 아래와 같이 승인 필요

salt-key -L
salt-key -A


몇가지 명령

    salt '* ' test.ping
    salt '* ' network.ip_addrs
    # grains 정보 가져오기
    salt '* ' grains.items
    salt '* ' grains.item host

    # 상태 가져오기
    salt '* ' status.meminfo

    # 원격 실행
    salt '* ' pkg.list_pkgs

    salt '* ' cmd.run 'echo Hello!!'

    salt '* ' service.status salt
    salt '* ' service.start salt


## Saltstack GUI 도구 설치

참고의 wiki를 따라가보면, 오픈소스 중에 유망(?)한 건 두가지인듯 싶다. Halite,Saltpad

Halite Web UI 설치

    $ vi /etc/salt/master

아래 설정을 추가

    external_auth:   # 외부 인증 설정
      pam:
        salt:           # Halite 시스템 사용자
          - .*
          - '@runner'
          - '@wheel'

    halite:              # halite에 대한 서버 설정
      level: 'debug'
      server: 'gevent'   # cherrypy, paste, gevent 중 택일
      host: '0.0.0.0'
      port: '8080'
      cors: False


salt user 추가

    $ useradd salt
    $ passwd salt

halite 설치 및 실행

    $ git clone https://github.com/saltstack/halite /opt/halite

    $ apt-get install -y python-gevent
    $ cd /opt/halite/halite
    #시작
    $ ./server_bottle.py -d -C -l debug -s gevent



## WEB-WAS-DB 어플리케이션 자동설치

### 기본 Salt설정 및 사용관련

간단한 state 실행 테스트를 위해 다음과 같이 수행. 설치하고 삭제 하는 등의 행위를 state로 정의하며, state를 apply한다. pkg.installed에서 보듯이 "이미 설치된 상태 자체"를 전달한다.

/etc/salt/master 설정의 경우 수정 후 salt-master 데몬을 한 번 재시작해 주어야 함

minion도 마찬가지로 서비스 모드로 실행하며, 재시작 가능

    service salt-minion restart

pillar는 설정 후나 변경 후에 한 번씩 refresh가 필요함.

    salt '* ' saltutil.refresh_pillar

salt의 base가 되는 디렉토리를 지정해야 함. 마찬가지로 pillar도 base가 있는듯

### Salt 디렉토리 구성

기본적인 Saltstack 프로젝트는 아래와 같이 구성된다.

    $ tree
    .
    ├── pillar                -- TBD
    │   └── _ blank            
    └── salt  
        ├── common.sls        -- 일반용도sls, salt '* ' state.apply common처럼 별도설치 가능
        ├── nettools          -- 네트웍관련 sls, 별도 디렉토리를 만들 경우 init.sls 를 바로 찾음
        │   ├── config        -- 관련 설정을 위한 디렉토리
        │   └── init.sls      -- salt '* ' state.apply nettools 시 이 sls를 보게 됨
        ├── tomcat
        │   ├── init.sls
        │   └── settings.sls  -- 공용 변수(map)을 위한 공간을 가진 sls
        └── top.sls           -- 기본적으로 state를 주지 않을 경우 top.sls가 설치된다.

    nettools 안에 init.sls, env.sls 와 같이 있을 경우 아래와 같이 바로 실행접근 됨
    nettools - init.sls
    nettools.env - env.sls

### state 작성시 주의사항

- sls파일 하나 단위로는 state라고 하는듯 하며, state파일들이 모여서 formula가 됨

- template을 위한 언어는 jinja, 신사 라고 하며, 일본 신사에서 따왔다고 함(template과 연결??), 이거 이외에도 다양한 템플릿 엔진이 있다. java의 velocity처럼 약간 별도의 문법을 가진 addon라이브러리라고 봐야 할 듯 싶다.

- 작업 대상이 되는 파일은 salt 영역 안에 있어야 함(salt://) - 이건 확실하지 않음, 밖에 있는 파일을 참고하려고 할 경우 계속 에러가 발생함.

- 디버깅이 힘들다. 찍어 볼 수는 있으나, coredump가 떨어지기도 함. 코드가 복잡해질 경우 원인을 찾기 매우 힘들다.(어디가 문제인지 파악하기 힘듬.)

- 간혹 수정 후 재실행시 Memory Error가 발생함. 조금 기다렸다 다시 실행하거나, 서비스를 재시작 후 다시 실행하면 잘 실행된다.

- /etc/salt/master 파일 안의 file_roots를 지정한다. 여러 라인으로 지정할 수 있으나, 동일한 이름의 state가 있으면 위에 입력된 것을 먼저 보는 것 같다.





### Fomular

Chef의 recipe와 같이 formula라는 이름으로 오픈소스 패키지들을 설치할 수 있는 자동 script들을 제공. Chef의 supermarket이나, Ansible의 Galaxy처럼 아직 별도의 site가 있는 건 아니며 양도 적은 편. Chef 등에 비하면 아주 간단하게 구성되어 있으나, 초보자가 바로 보기엔 적합하지 않다.

[공식 Home:Salt Fomular](https://github.com/saltstack-formulas)

[공식 Guide:Salt Fomular](https://docs.saltstack.com/en/latest/topics/development/conventions/formulas.html)




# 참고

- [SaltStack – IT automation infrastructure management tools](http://www.yongbok.net/blog/saltstack-it-automation-infrastructure-management-tools/)

- [Saltstack 너란 녀석. - Grains와 Pillar (2)](http://bluese05.tistory.com/43)

- [Saltstack documentation](https://docs.saltstack.com/en/latest/) - 처음에 개념을 잡기 좀 힘들었는데, 중간부분에 Tutorial을 따라 해 보면서 감을 잡을 수 있었음.
