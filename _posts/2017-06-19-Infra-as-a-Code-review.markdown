---
layout: post
title: 코드로 인프라 관리하기 리뷰
date: 2017-06-19 20:16:00
tags:
- Tech
- Review
---

한빛출판사의 코드로 인프라 관리하기 라는 책의 리뷰(저자 키프 모리스)

많은 도구, 기술, 플랫폼 들이 나오긴 하지만, 특정한 기술이나 플랫폼에 관한 책은 아님. 왜 서버 인프라를 코드로 관리해야 하고, 생성하고 테스트하는 부분을 자동화 해야 하는지,실제로 인프라 팀의 시각에서 실행할 수 있는 방법을 제시하고 있음.

책 자체에서 저자가 경험한 내용을 바탕으로 설명하고 있는 듯한 느낌이 들고, 내용에 대한 설명도 쉽게 이해할 수 있는 방식으로 진행하고 있음.

## 소감 및 의견

### 서론부분

새로운 업데이트가 나오면, 모든 시스템에 업데이트를 설치해야 했고, 어떤 서버에는 성공적으로 적용했지만, 다른 서버에서는 충돌을 일으켰고, 이를 해결하기 위해 많은 시간을 보내야 했다. 팀의 서버들은 모두 너무 달랐고, 팀은 무인 방식을 신뢰하지 않았다.

코드로 인프라를 관리하기 위한 핵심 개념 - 모든 서버는 처음부터 다시 생성할 수 있으며, 구성도구는 지속적으로 동작한다.

### cp1. 문제와 원칙

코드로서의 인프라 - SW개발 관례에 기반을 둔 인프라 자동화 방법으로 시스템과 구성을 프로비저닝하고 변경하기 위한 일관되고 반복 가능한 절차에 중점을 둔다.

*동적 인프라의 문제점*

- 서버 폭증 - 서버가 늘어날 수록 관리가 힘들어지고, 구성이 달라질 가능성이 생김
- 구성 편차 - 서버를 일관되게 구성했더라도 시간이 갈 수록 점점 차이가 생길 수 있다. 구성이 다르다고 나쁜 것은 아니나, 변경된 부분이 재생성 될 수 있도록 관리해야 한다. -> 관리되지 않는 변경은 눈송이 서버(snowflake)와 자동화 공포를 일으킨다.
- 눈송이 서버 - 다른 서버들과 다른, 다시 만들수 없는 서버. 담당자 변경, 매뉴얼 없는 수작업이 반복되면 결국 이렇게 된다.
- 자동화 공포 - 자동화 공포의 악순환(자동화 도구를 사용하지 않고 구성을 변경 -> 서버 일관성X -> 자동화 도구 실행시 오류에 대한 두려움 ->순환)을 끊어야 한다. 무인 방식으로 운영해야 함.
- 침식 - 새로운 요구가 없으면 인프라는 시간이 갈 수록 노후된다.(업그레이드,패치,로그파일 등)

*코드로서의 인프라의 원칙*

- 시스템은 쉽게 다시 만들 수 있다.
- 시스템은 일회용이다.
- 시스템은 일관성이 있다.
- 절차는 반복 가능하다.
- 설계는 항상 변한다.


*동적 인프라 플랫폼*

- 서버, 스토리지 네트워크와 같은 컴퓨팅 자원을 효율적으로 관리할 수 있는 기반을 말함
- 프로그래밍이 용이해야 함, 온디맨드(자원을 즉시 생성/삭제), 셀프 서비스(인프라 사용자에 의한 변경)
- 클라우드 이동성 - 클라우드 벤더 업체의 전용 기능을 사용하지 않는다.(차후 이동을 용이하게 함), 컨테이너화가 클라우드 업체 종속을 막는 한 방법이 될수 있다.

*인프라 정의 도구*
- Cloudformation(AWS), Terraform(Hashicorp), Heat(OpenStack)
- Script, 무인 방식의 CLI작업이 가능해야 함
- 멱등성 - 몇번을 실행하던지 동일한 결과를 나타내야 함.

*구성 레지스트리,서버 구성 도구*
- CF엔진, puppet, Chef, Ansible, saltstack 등 + docker도 이 범주에 들어갈 수 있다.
- 서버 다수에 원격으로 명령을 실행하는 도구 : 많은 서버를 관리하는 데 도움이 될 수 있다.

*서버 변경 관리 모형*
- 일시적 변경 관리 - 전통적인 방식
- 구성 동기화 - 구성관리 도구를 사용하는 방식
- 불편 인프라 - 서버를 완전히 교체하는 방식으로 구성을 변경하는 인프라, 서버 템플릿 관리를 세밀하게 해야 함
- 컨테이너화된 서비스 - Docker등의 컨테이너 서비스를 이용하는 방법


*컨테이너*
도커, 로켓(CoreOS), 워든(Pivoal의 클라우드파운드리), 윈도우 컨테이너 등

*컨테이너화의 장점*
- 애플리케이션의 런타임 환경을 호스트 서버와 분리 -> 설치된 어플리케이션이 서로 영향을 미치거나, 충돌하는 문제를 방지할 수 있음.
- 일관성 있는 런타임 환경을 반복해서 만들 수 있다.
- 코드로서의 인프라의 모든 일반적인 특성을 포함할 수 있다.

*컨테이너는 가상 머신과 다르다.*
여러 프로세스를 단일 컨테이너에서 실행하기 보다, 단일 프로세스만 동작하는 여러 컨테이너를 실행하는 방향으로 -> 컨테이너는 마이크로서비스에 적합하다.
