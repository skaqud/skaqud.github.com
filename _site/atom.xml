<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Ska's Blog</title>
 <link href="http://skaqud.github.io/atom.xml" rel="self"/>
 <link href="http://skaqud.github.io/"/>
 <updated>2016-07-08T22:24:36+09:00</updated>
 <id>http://skaqud.github.io</id>
 <author>
   <name>ska</name>
   <email></email>
 </author>

 
 <entry>
   <title>WEB,WAS,DB 설치 및 웹 어플리케이션 구성을 위해 연동하기</title>
   <link href="http://skaqud.github.io/architecture/2016/04/26/make-devenv/"/>
   <updated>2016-04-26T01:01:49+09:00</updated>
   <id>http://skaqud.github.io/architecture/2016/04/26/make-devenv</id>
   <content type="html">&lt;p&gt;본 문서에서는 준비된 가상 개발환경에 WEB,WAS,DB를 설치하고 Sample Application을 deploy하여 확인하는 과정에 대해 설명합니다.&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;개요&lt;/h1&gt;

&lt;p&gt;다음과 같은 환경에서 로컬에 생성된 linux(CentOS) 가상환경(VM)을 기반으로 WEB-WAS-DB를 구성하고 Sample application 을 deploy 하여 테스트합니다.&lt;/p&gt;

&lt;p&gt;세부 테스트환경&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OS : CentOS 7(vagrant box:centos/7)&lt;/li&gt;
  &lt;li&gt;WEB : nginx(yum repository 버전)&lt;/li&gt;
  &lt;li&gt;WAS : apache-tomcat 7.x,(openjdk 1.8)&lt;/li&gt;
  &lt;li&gt;DB - mariadb&lt;/li&gt;
  &lt;li&gt;WebApp : spring-petclinic(https://github.com/spring-projects/spring-petclinic)&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;section-1&quot;&gt;실행하기&lt;/h1&gt;

&lt;p&gt;우선은 vagrant + virtualbox로 linux vm을 로컬에서 시작&lt;/p&gt;

&lt;p&gt;해당 vm에서 다음과 같이 패키지 관리자로 최신 OS 로 업데이트&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이상 없이 업데이트 될 경우 기본적인 준비가 된 것으로 봅니다.&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;0) 계정 생성&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#계정 생성
adduser testu

#비번 설정
passwd testu
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이후 WAS, DB의 기본적인 작업은 위의 계정으로 실행합니다.&lt;/p&gt;

&lt;h3 id=&quot;db-&quot;&gt;1) DB 설치&lt;/h3&gt;

&lt;p&gt;참고 : http://firstboos.tistory.com/entry/CentOS-7-에서-mariadb-설치&lt;/p&gt;

&lt;p&gt;위 블로그 내용을 참고해서 기본 패키지관리자(yum)를 통해 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install mariadb-server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;블로그 내용대로 characterset 설정(utf-8)을 한 뒤 서비스를 시작&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;service mariadb start
#혹은 다음과 같이 실행
#systemctl mariadb start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;root 비번을 적당히 설정한 뒤 DB상태를 확인합니다.(root 비번을 까먹지 않도록 주의합니다.)&lt;/p&gt;

&lt;p&gt;위에서 생성한 계정(testu)로도 로그인 되는지 확인합니다.&lt;/p&gt;

&lt;h3 id=&quot;was-&quot;&gt;2) WAS 설치&lt;/h3&gt;

&lt;p&gt;우선 tomcat에서 사용할 jdk를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum search openjdk | grep jdk
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;목록을 확인하여 java 1.7 jdk를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install java-1.7.0-openjdk.x86_64
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다음과 같이 설치를 확인합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost ~]# java -version
java version &quot;1.7.0_101&quot;
OpenJDK Runtime Environment (rhel-2.6.6.1.el7_2-x86_64 u101-b00)
OpenJDK 64-Bit Server VM (build 24.95-b01, mixed mode)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위에서 생성한 계정으로 로그인한 후 tomcat을 다운로드 합니다. 다운로드 주소는 이곳에서 확인, tomcat의 경우 binary를 다운로드 받은 뒤 특정 디렉토리에 설치합니다. webapps 들이 deploy되어야 하기에 일반적으로 관리될 수 있는 디렉토리에 위치시키는 게 좋을 것 같습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#계정 변경(testu)
su - testu

mkdir app
cd app
wget http://apache.mirror.cdnetworks.com/tomcat/tomcat-8/v8.0.35/bin/apache-tomcat-8.0.35.tar.gz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;압축을 해제한 뒤 tomcat을 시작하여 정상적으로 기동되는 지 확인합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar zxvf apache-tomcat-8.0.35.tar.gz
cd apache-tomcat-8.0.35/bin
./startup.sh
[testu@localhost bin]$ ./startup.sh
Using CATALINA_BASE:   /home/testu/app/apache-tomcat-8.0.35
Using CATALINA_HOME:   /home/testu/app/apache-tomcat-8.0.35
Using CATALINA_TMPDIR: /home/testu/app/apache-tomcat-8.0.35/temp
Using JRE_HOME:        /
Using CLASSPATH:       /home/testu/app/apache-tomcat-8.0.35/bin/bootstrap.jar:/home/testu/app/apache-tomcat-8.0.35/bin/tomcat-juli.jar
Tomcat started.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;curl명령 혹은 브라우저를 통해 실행을 확인합니다.&lt;/p&gt;

&lt;h3 id=&quot;web-&quot;&gt;3) WEB 설치&lt;/h3&gt;

&lt;p&gt;아래와 같이 repository를 추가하여 nginx 저장소를 등록한 뒤&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/yum.repos.d/nginx.repo

[nginx]
name=nginx repo
baseurl=http://nginx.org/packages/centos/7/$basearch/
gpgcheck=0
enabled=1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;nginx를 설치합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이후 서비스를 시작하고,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start nginx

[root@localhost ~]# ps -ef | grep nginx
root      2178     1  0 10:33 ?        00:00:00 nginx: master process /usr/sbin/nginx -c /etcnginx/nginx.conf
nginx     2180  2178  0 10:33 ?        00:00:00 nginx: worker process
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;curl명령 혹은 브라우저를 통해 실행을 확인합니다.&lt;/p&gt;

&lt;h3 id=&quot;war---&quot;&gt;4) WAR 준비 및 테스트&lt;/h3&gt;

&lt;p&gt;이제까지 진행된 내용들은 vm에서 작업되었으나, 다음 내용은 어느 환경에서 수행하던지 상관이 없습니다. 최종 테스트시에는 이 과정을 통해 생성된 war파일만을 사용합니다. 이클립스 툴을 사용해야 하므로 보통은 VM말고 host pc에서 수행합니다.&lt;/p&gt;

&lt;p&gt;다운로드 페이지(https://eclipse.org/downloads/)에서&lt;/p&gt;

&lt;p&gt;Java EE Developers verison을 다운로드 한 뒤 원하는 곳에 압축을 풀고 실행합니다.&lt;/p&gt;

&lt;p&gt;이클립스가 정상적으로 실행되는지를 확인한 뒤, spring-petclinic프로젝트(https://github.com/spring-projects/spring-petclinic)를 다운로드 받아 import 합니다.&lt;/p&gt;

&lt;p&gt;import 방법에는 여러가지가 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;이클립스 상에서 git플러그인(egit)을 사용하여 import&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 git client를 이용해서 로컬에 다운로드 받은 뒤 해당 repository를 import 하는 방법&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;해당 사이트에서 zip을 다운로드 받아 이클립스에 import 하는 방법&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같이 이클립스 상에서 git 플러그인을 통해 직접 export 하는 방법으로 import 합니다.&lt;/p&gt;

&lt;p&gt;Package Explorer에서 오른쪽 마우스 클릭 &amp;gt; import 선택 후 Projects from GIT 선택&lt;/p&gt;

&lt;p&gt;-&amp;gt; Clone URI 선택 후 해당 project의 git 정보를 입력하여 import&lt;/p&gt;

&lt;p&gt;-&amp;gt; git clone 후 프로젝트 import 시 import as general project 로 선택하여 import 수행&lt;/p&gt;

&lt;p&gt;해당 프로젝트가 로컬에 import되면, 다음과 같은 사항들을 확인합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;해당 프로젝트 명에서 오른쪽 마우스 클릭 &amp;gt; Properties에서 Project facet의 정보 중 Java와 Dynamic web module이 선택되어 있는지 확인&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Maven 프로젝트인지 확인하여 안되어 있을 경우 Configure &amp;gt; Convert to Maven Project를 선택하여 Maven Project로 변경&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;이상이 완료되면, 한 번 실행하여 실행여부를 확인합니다. “Run as” &amp;gt; “Maven Clean” 후 “Maven Install” 을 선택하여 패키징을 수행합니다. 초기 수행시 Maven depedency에 의해 관련된 라이브러리를 다운로드 하는 데 시간이 좀 걸리며, 이후 target 디렉토리에 petclinic.war 가 생기면 성공적으로 완료된 것입니다.&lt;/p&gt;

&lt;p&gt;단 원래 버전은 HSQL 기반이므로, data-access.properties 파일의 DB설정부분을 MySQL 용으로 변경하고 pom.xml 파일의 다음 부분의 압축을 푼 뒤 다시 패키징을 수행하여 정상적으로 Mariadb로 연결될 수 있는 바이너리를 생성합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &amp;lt;!-- 다음 부분의 주석 해제(원래 주석처리 되어 있음) --&amp;gt;
    &amp;lt;!-- For MySql only --&amp;gt;
    &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;${mysql-driver.version}&amp;lt;/version&amp;gt;
    &amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Maven Install 시 테스트를 skip하기 위해서 pom.xml 파일의 다음부분에 skipTest태그를 넣습니다.(그렇지 않을 경우 로컬에서 테스트Case 오류가 발생)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        &amp;lt;plugin&amp;gt;
            &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
            &amp;lt;artifactId&amp;gt;maven-surefire-plugin&amp;lt;/artifactId&amp;gt;
            &amp;lt;version&amp;gt;2.13&amp;lt;/version&amp;gt;
            &amp;lt;configuration&amp;gt;
            	&amp;lt;!-- 아래 내용을 추가  --&amp;gt;
                &amp;lt;skipTests&amp;gt;true&amp;lt;/skipTests&amp;gt;
                &amp;lt;includes&amp;gt;
                    &amp;lt;include&amp;gt;**/*Tests.java&amp;lt;/include&amp;gt;
                &amp;lt;/includes&amp;gt;
            &amp;lt;/configuration&amp;gt;
        &amp;lt;/plugin&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;deploy--&quot;&gt;5) Deploy 및 통합테스트&lt;/h3&gt;

&lt;p&gt;위에서 준비한 petclinic.war를 VM으로 옮깁니다. 2)에서 설치한 apache tomcat의 하위 디렉토리 중 webapps 하위 디렉토리에 가져다 놓은 뒤 tomcat을 재기동하면 자동으로 web application이 압축이 풀리며 시작됩니다.&lt;/p&gt;

&lt;p&gt;웹 어플리케이션이 성공적으로 시작되었으면 브라우저를 통해 확인합니다.&lt;/p&gt;

&lt;p&gt;이후 web, db와 연동하기 위해 다음과 같이 수행합니다.&lt;/p&gt;

&lt;p&gt;WEB-WAS 연동은 nginx 설정을 수정하여 사용자가 nginx 의 80포트를 호출하면 WAS의 서비스포트로 연결해주는 역할이며, 이는 nginx를 reverse proxy로 사용하는 방식입니다&lt;/p&gt;

&lt;p&gt;다음 nginx 설정을 열어&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vi /etc/nginx/conf.d/default.conf

#add thid configuration
location /petclinic/ {
    proxy_pass http://localhost:8080/petclinic/;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;위의 내용을 맨 server 영역 안쪽부분에 추가합니다. 이후로는 밖으로 8080이 열려 있지 않아도 해당 서비스(petclinic)에 대하여 80포트를 통해 서비스할 수 있습니다.(서비스 재기동 필요)&lt;/p&gt;

&lt;p&gt;DB의 경우 WAS에 설정된 DB 정보를 위의 3) 에서 설치된 DB 정보로 변경해 주어야 합니다.&lt;/p&gt;

&lt;p&gt;설정파일을 찾기 위해 해당 어플리케이션이 설치된 위치로 갑니다.&lt;/p&gt;

&lt;p&gt;4번 과정을 수행해서 생성된 petclinic.war를 2번에서 설치한 ~/app/tomcat경로/webapps 하위에 복사합니다.
현재 tomcat이 구동중이라면 자동으로 war를 인식하여 압축을 풀면서 자동으로 어플리케이션을 올립니다.
DB 정보를 수정하기 위해서 압축이 풀린 디렉토리를 탐색하여 정보를 수정합니다.&lt;/p&gt;

&lt;p&gt;다음 경로 하위의
/home/testu/app/apache-tomcat-8.0.35/webapps/petclinic/WEB-INF/classes/spring
data-access.properties 파일의 내용을 열면 HSQL과 MySQL 부분에 대한 설정이 보입니다. 현재 열려 있는 HSQL부분을 주석처리 한 뒤 MySQL부분의 주석을 해제한뒤 아래 내용처럼 입력해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# MySQL Settings
jdbc.driverClassName=com.mysql.jdbc.Driver
jdbc.url=jdbc:mysql://localhost:3306/petclinic?useUnicode=true&amp;amp;characterEncoding=UTF-8
jdbc.username=petclinic
jdbc.password=petclinic

# Property that determines which database to use with an AbstractJpaVendorAdapter
jpa.database=MYSQL							
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;끝으로 위에서 입력한 정보대로 DB, 계정을 생성해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE petclinic DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci;
create user &#39;petclinic&#39;@&#39;%&#39; identified by &#39;petclinic&#39;;
create user &#39;petclinic&#39;@&#39;localhost&#39; identified by &#39;petclinic&#39;;
grant all privileges on petclinic.* to &#39;petclinic&#39;@&#39;%&#39;;
grant all privileges on petclinic.* to &#39;petclinic&#39;@&#39;localhost&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;접속을 테스트 해 본 뒤 기능이 제대로 동작하는 지 확인합니다.&lt;/p&gt;

&lt;p&gt;수정 후 tomcat을 재시작하여 이상없이 데이터가 나오는지 확인합니다.&lt;/p&gt;

&lt;p&gt;최종적으로 80 포트를 통해 서비스를 확인하면 web - was - db 연동이 제대로 된 것이라고 할 수 있습니다.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Vagrant로 로컬에 가상 개발환경 준비하기</title>
   <link href="http://skaqud.github.io/architecture/2016/04/11/Using-Vagrant/"/>
   <updated>2016-04-11T18:15:49+09:00</updated>
   <id>http://skaqud.github.io/architecture/2016/04/11/Using-Vagrant</id>
   <content type="html">&lt;p&gt;본 문서에서는 간략하게 Vagrant(와 Virtualbox) 를 이용하여 개발환경으로 사용할 가상 환경을 로컬에 생성하는 과정을 설명합니다. 아무래도 개인적으로 좀 더 거창하고 복잡한 Docker 보다는 vagrant가 더 접근하기 쉬웠던 것 같습니다.&lt;/p&gt;

&lt;h1 id=&quot;vagrantvirtualbox-&quot;&gt;vagrant+Virtualbox 설치&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Vagrant - 최신 버전 1.8.1(https://www.vagrantup.com/downloads.html)&lt;/li&gt;
  &lt;li&gt;Virtualbox - 최신 버전 5.0.20(https://www.virtualbox.org/wiki/Downloads)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;다음과 같은 명령을 실행하여 로컬 환경에 linux를 설치&lt;/p&gt;

&lt;p&gt;로컬 환경에 vagrant 디렉토리 생성, 디렉토리 이름은 상관 없으나(마음대로 생성 가능), 실행시키는 명령의 기본 디렉토리가 되므로, 앞으로 실행할 명령은 항상 다음 디렉토리 바로 아래에서 수행해야 합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir ~/vagrant/centos
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;해당 디렉토리 안에서 다음과 같이 실행하면 Vagrantfile이 생성됨&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#vagrant init
A `Vagrantfile` has been placed in this directory. You are now
ready to `vagrant up` your first virtual environment! Please read
the comments in the Vagrantfile as well as documentation on
`vagrantup.com` for more information on using Vagrant.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다음과 같이 로컬에 box를 추가&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ubuntu의 경우
#vagrant box add ubuntu/trusty64

centos의 경우(선택하라고 나올 경우 virtualbox 버전 선택)
#vagrant box add centos/7
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;다음과 같이 실행시 다음처럼 나오면 성공&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# vagrant box list
centos/7        (virtualbox, 1603.01)
ubuntu/trusty64 (virtualbox, 20160516.0.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이후 위에서 생성된 Vagrantfile의 다음 부분을 위에서 받은 box이름으로 수정합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(편집기로 Vagrantfile을 열어 중간의 다음 부분을)
config.vm.box = &quot;base&quot;
(다음과 같이 수정-설치 원하는 OS로)
config.vm.box = &quot;centos/7&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이후 다음과 같이 살행하여 VM을 실행시켜 줍니다.(시간이 다소 소요됨)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  temp vagrant up
Bringing machine &#39;default&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; default: Importing base box &#39;centos/7&#39;...
==&amp;gt; default: Matching MAC address for NAT networking...
==&amp;gt; default: Checking if box &#39;centos/7&#39; is up to date...
==&amp;gt; default: Setting the name of the VM: temp_default_1463604899809_17904
==&amp;gt; default: Clearing any previously set network interfaces...
==&amp;gt; default: Preparing network interfaces based on configuration...
    default: Adapter 1: nat
==&amp;gt; default: Forwarding ports...
    default: 22 =&amp;gt; 2222 (adapter 1)
==&amp;gt; default: Booting VM...
==&amp;gt; default: Waiting for machine to boot. This may take a few minutes...
    default: SSH address: 127.0.0.1:2222
    default: SSH username: vagrant
    default: SSH auth method: private key
    default: Warning: Connection timeout. Retrying...
    default: Warning: Remote connection disconnect. Retrying...
    default:
    default: Vagrant insecure key detected. Vagrant will automatically replace
    default: this with a newly generated keypair for better security.
    default:
    default: Inserting generated public key within guest...
    default: Removing insecure key from the guest if it&#39;s present...
    default: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; default: Machine booted and ready!
==&amp;gt; default: Checking for guest additions in VM...
    default: No guest additions were detected on the base box for this VM! Guest
    default: additions are required for forwarded ports, shared folders, host only
    default: networking, and more. If SSH fails on this machine, please install
    default: the guest additions and repackage the box to continue.
    default:
    default: This is not an error message; everything may continue to work properly,
    default: in which case you may ignore this message.
==&amp;gt; default: Rsyncing folder: /data/vagrant/temp/ =&amp;gt; /home/vagrant/sync
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;이후 실행된 VM에 다음과 같이 접속할 수 있습니다.(반드시 아까 생성한 디렉토리에서 실행)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;➜  temp vagrant ssh
-bash: warning: setlocale: LC_CTYPE: cannot change locale (UTF-8): No such file or directory
[vagrant@localhost ~]$
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;section&quot;&gt;참고&lt;/h1&gt;

&lt;p&gt;Vagrant 소개&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;http://taewan.kim/blog/2016/02/06/vagrant_intro/&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http://ppiazi.tistory.com/entry/Vagrant-VirtualBox-가상머신-관리-도구-소개&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http://bcho.tistory.com/806&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vagrant 설치 및 사용법 관련&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;http://manseok.blogspot.kr/2014/09/vagrant.html&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;http://rangken.github.io/blog/2015/vagrant-1/&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Welcome to Jekyll!</title>
   <link href="http://skaqud.github.io/jekyll/update/2016/03/01/welcome-to-jekyll/"/>
   <updated>2016-03-01T01:05:11+09:00</updated>
   <id>http://skaqud.github.io/jekyll/update/2016/03/01/welcome-to-jekyll</id>
   <content type="html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Tom&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &#39;Hi, Tom&#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</content>
 </entry>
 

</feed>
